/**********************************************************************
 * Extern for Web3
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Web3 = {
  "givenProvider": {},
  "modules": {
    "Bzz": {
      "givenProvider": {}
    },
    "Eth": {
      "givenProvider": {},
      "providers": {
        "HttpProvider": function () {},
        "IpcProvider": function () {},
        "WebsocketProvider": function () {}
      }
    },
    "Net": {
      "givenProvider": {},
      "providers": {
        "HttpProvider": function () {},
        "IpcProvider": function () {},
        "WebsocketProvider": function () {}
      }
    },
    "Personal": {
      "givenProvider": {},
      "providers": {
        "HttpProvider": function () {},
        "IpcProvider": function () {},
        "WebsocketProvider": function () {}
      }
    },
    "Shh": {
      "givenProvider": {},
      "providers": {
        "HttpProvider": function () {},
        "IpcProvider": function () {},
        "WebsocketProvider": function () {}
      }
    }
  },
  "providers": {
    "HttpProvider": function () {},
    "IpcProvider": function () {},
    "WebsocketProvider": function () {}
  },
  "utils": {
    "BN": {
      "BN": function () {},
      "_prime": function () {},
      "isBN": function () {},
      "max": function () {},
      "min": function () {},
      "mont": function () {},
      "red": function () {},
      "wordSize": {}
    },
    "_": {
      "VERSION": {},
      "_": function () {},
      "after": function () {},
      "all": function () {},
      "allKeys": function () {},
      "any": function () {},
      "assign": function () {},
      "before": function () {},
      "bind": function () {},
      "bindAll": function () {},
      "chain": function () {},
      "clone": function () {},
      "collect": function () {},
      "compact": function () {},
      "compose": function () {},
      "constant": function () {},
      "contains": function () {},
      "countBy": function () {},
      "create": function () {},
      "debounce": function () {},
      "defaults": function () {},
      "defer": function () {},
      "delay": function () {},
      "detect": function () {},
      "difference": function () {},
      "drop": function () {},
      "each": function () {},
      "escape": function () {},
      "every": function () {},
      "extend": function () {},
      "extendOwn": function () {},
      "filter": function () {},
      "find": function () {},
      "findIndex": function () {},
      "findKey": function () {},
      "findLastIndex": function () {},
      "findWhere": function () {},
      "first": function () {},
      "flatten": function () {},
      "foldl": function () {},
      "foldr": function () {},
      "forEach": function () {},
      "functions": function () {},
      "groupBy": function () {},
      "has": function () {},
      "head": function () {},
      "identity": function () {},
      "include": function () {},
      "includes": function () {},
      "indexBy": function () {},
      "indexOf": function () {},
      "initial": function () {},
      "inject": function () {},
      "intersection": function () {},
      "invert": function () {},
      "invoke": function () {},
      "isArguments": function () {},
      "isArray": function () {},
      "isBoolean": function () {},
      "isDate": function () {},
      "isElement": function () {},
      "isEmpty": function () {},
      "isEqual": function () {},
      "isError": function () {},
      "isFinite": function () {},
      "isFunction": function () {},
      "isMatch": function () {},
      "isNaN": function () {},
      "isNull": function () {},
      "isNumber": function () {},
      "isObject": function () {},
      "isRegExp": function () {},
      "isString": function () {},
      "isUndefined": function () {},
      "iteratee": function () {},
      "keys": function () {},
      "last": function () {},
      "lastIndexOf": function () {},
      "map": function () {},
      "mapObject": function () {},
      "matcher": function () {},
      "matches": function () {},
      "max": function () {},
      "memoize": function () {},
      "methods": function () {},
      "min": function () {},
      "mixin": function () {},
      "negate": function () {},
      "noConflict": function () {},
      "noop": function () {},
      "now": function () {},
      "object": function () {},
      "omit": function () {},
      "once": function () {},
      "pairs": function () {},
      "partial": function () {},
      "partition": function () {},
      "pick": function () {},
      "pluck": function () {},
      "property": function () {},
      "propertyOf": function () {},
      "random": function () {},
      "range": function () {},
      "reduce": function () {},
      "reduceRight": function () {},
      "reject": function () {},
      "rest": function () {},
      "result": function () {},
      "sample": function () {},
      "select": function () {},
      "shuffle": function () {},
      "size": function () {},
      "some": function () {},
      "sortBy": function () {},
      "sortedIndex": function () {},
      "tail": function () {},
      "take": function () {},
      "tap": function () {},
      "template": function () {},
      "templateSettings": {
        "escape": {},
        "evaluate": {},
        "interpolate": {}
      },
      "throttle": function () {},
      "times": function () {},
      "toArray": function () {},
      "unescape": function () {},
      "union": function () {},
      "uniq": function () {},
      "unique": function () {},
      "uniqueId": function () {},
      "unzip": function () {},
      "values": function () {},
      "where": function () {},
      "without": function () {},
      "wrap": function () {},
      "zip": function () {}
    },
    "_fireError": function () {},
    "_flattenTypes": function () {},
    "_jsonInterfaceMethodToString": function () {},
    "asciiToHex": function () {},
    "bytesToHex": function () {},
    "checkAddressChecksum": function () {},
    "fromAscii": function () {},
    "fromDecimal": function () {},
    "fromUtf8": function () {},
    "fromWei": function () {},
    "hexToAscii": function () {},
    "hexToBytes": function () {},
    "hexToNumber": function () {},
    "hexToNumberString": function () {},
    "hexToString": function () {},
    "hexToUtf8": function () {},
    "isAddress": function () {},
    "isBN": function () {},
    "isBigNumber": function () {},
    "isHex": function () {},
    "isHexStrict": function () {},
    "keccak256": {
      "_Hash": {
        "keccak256": function () {},
        "keccak256s": function () {},
        "keccak512": function () {},
        "keccak512s": function () {}
      }
    },
    "leftPad": function () {},
    "numberToHex": function () {},
    "padLeft": function () {},
    "padRight": function () {},
    "randomHex": function () {},
    "rightPad": function () {},
    "sha3": {
      "_Hash": {
        "keccak256": function () {},
        "keccak256s": function () {},
        "keccak512": function () {},
        "keccak512s": function () {}
      }
    },
    "soliditySha3": function () {},
    "stringToHex": function () {},
    "toAscii": function () {},
    "toBN": function () {},
    "toChecksumAddress": function () {},
    "toDecimal": function () {},
    "toHex": function () {},
    "toTwosComplement": function () {},
    "toUtf8": function () {},
    "toWei": function () {},
    "unitMap": {
      "Gwei": {},
      "Kwei": {},
      "Mwei": {},
      "babbage": {},
      "ether": {},
      "femtoether": {},
      "finney": {},
      "gether": {},
      "grand": {},
      "gwei": {},
      "kether": {},
      "kwei": {},
      "lovelace": {},
      "mether": {},
      "micro": {},
      "microether": {},
      "milli": {},
      "milliether": {},
      "mwei": {},
      "nano": {},
      "nanoether": {},
      "noether": {},
      "picoether": {},
      "shannon": {},
      "szabo": {},
      "tether": {},
      "wei": {}
    },
    "utf8ToHex": function () {}
  },
  "version": {}
};
Web3.modules.Bzz.prototype = {
  "setProvider": function () {}
};
Web3.modules.Eth.providers.HttpProvider.prototype = {
  "_prepareRequest": function () {},
  "disconnect": function () {},
  "send": function () {}
};
Web3.modules.Eth.providers.IpcProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "on": function () {},
  "once": function () {},
  "reconnect": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.modules.Eth.providers.WebsocketProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "disconnect": function () {},
  "on": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.modules.Net.providers.HttpProvider.prototype = {
  "_prepareRequest": function () {},
  "disconnect": function () {},
  "send": function () {}
};
Web3.modules.Net.providers.IpcProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "on": function () {},
  "once": function () {},
  "reconnect": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.modules.Net.providers.WebsocketProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "disconnect": function () {},
  "on": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.modules.Personal.providers.HttpProvider.prototype = {
  "_prepareRequest": function () {},
  "disconnect": function () {},
  "send": function () {}
};
Web3.modules.Personal.providers.IpcProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "on": function () {},
  "once": function () {},
  "reconnect": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.modules.Personal.providers.WebsocketProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "disconnect": function () {},
  "on": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.modules.Shh.providers.HttpProvider.prototype = {
  "_prepareRequest": function () {},
  "disconnect": function () {},
  "send": function () {}
};
Web3.modules.Shh.providers.IpcProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "on": function () {},
  "once": function () {},
  "reconnect": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.modules.Shh.providers.WebsocketProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "disconnect": function () {},
  "on": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.providers.HttpProvider.prototype = {
  "_prepareRequest": function () {},
  "disconnect": function () {},
  "send": function () {}
};
Web3.providers.IpcProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "on": function () {},
  "once": function () {},
  "reconnect": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.providers.WebsocketProvider.prototype = {
  "_addResponseCallback": function () {},
  "_parseResponse": function () {},
  "_timeout": function () {},
  "addDefaultEvents": function () {},
  "disconnect": function () {},
  "on": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "reset": function () {},
  "send": function () {}
};
Web3.utils.BN.prototype = {
  "_countBits": function () {},
  "_expand": function () {},
  "_forceRed": function () {},
  "_iaddn": function () {},
  "_init": function () {},
  "_initArray": function () {},
  "_initNumber": function () {},
  "_invmp": function () {},
  "_ishlnsubmul": function () {},
  "_normSign": function () {},
  "_parseBase": function () {},
  "_parseHex": function () {},
  "_wordDiv": function () {},
  "_zeroBits": function () {},
  "abs": function () {},
  "add": function () {},
  "addn": function () {},
  "and": function () {},
  "andln": function () {},
  "bincn": function () {},
  "bitLength": function () {},
  "byteLength": function () {},
  "clone": function () {},
  "cmp": function () {},
  "cmpn": function () {},
  "copy": function () {},
  "div": function () {},
  "divRound": function () {},
  "divmod": function () {},
  "divn": function () {},
  "egcd": function () {},
  "eq": function () {},
  "eqn": function () {},
  "forceRed": function () {},
  "fromRed": function () {},
  "fromTwos": function () {},
  "gcd": function () {},
  "gt": function () {},
  "gte": function () {},
  "gten": function () {},
  "gtn": function () {},
  "iabs": function () {},
  "iadd": function () {},
  "iaddn": function () {},
  "iand": function () {},
  "idivn": function () {},
  "imaskn": function () {},
  "imul": function () {},
  "imuln": function () {},
  "ineg": function () {},
  "inotn": function () {},
  "inspect": function () {},
  "invm": function () {},
  "ior": function () {},
  "isEven": function () {},
  "isNeg": function () {},
  "isOdd": function () {},
  "isZero": function () {},
  "ishln": function () {},
  "ishrn": function () {},
  "isqr": function () {},
  "isub": function () {},
  "isubn": function () {},
  "iuand": function () {},
  "iuor": function () {},
  "iushln": function () {},
  "iushrn": function () {},
  "iuxor": function () {},
  "ixor": function () {},
  "lt": function () {},
  "lte": function () {},
  "lten": function () {},
  "ltn": function () {},
  "maskn": function () {},
  "mod": function () {},
  "modn": function () {},
  "mul": function () {},
  "mulTo": function () {},
  "mulf": function () {},
  "muln": function () {},
  "neg": function () {},
  "notn": function () {},
  "or": function () {},
  "pow": function () {},
  "redAdd": function () {},
  "redIAdd": function () {},
  "redIMul": function () {},
  "redISqr": function () {},
  "redISub": function () {},
  "redInvm": function () {},
  "redMul": function () {},
  "redNeg": function () {},
  "redPow": function () {},
  "redShl": function () {},
  "redSqr": function () {},
  "redSqrt": function () {},
  "redSub": function () {},
  "setn": function () {},
  "shln": function () {},
  "shrn": function () {},
  "sqr": function () {},
  "strip": function () {},
  "sub": function () {},
  "subn": function () {},
  "testn": function () {},
  "toArray": function () {},
  "toArrayLike": function () {},
  "toBuffer": function () {},
  "toJSON": function () {},
  "toNumber": function () {},
  "toRed": function () {},
  "toString": function () {},
  "toTwos": function () {},
  "uand": function () {},
  "ucmp": function () {},
  "umod": function () {},
  "uor": function () {},
  "ushln": function () {},
  "ushrn": function () {},
  "uxor": function () {},
  "xor": function () {},
  "zeroBits": function () {}
};
Web3.utils._.prototype = {
  "_": function () {},
  "after": function () {},
  "all": function () {},
  "allKeys": function () {},
  "any": function () {},
  "assign": function () {},
  "before": function () {},
  "bind": function () {},
  "bindAll": function () {},
  "chain": function () {},
  "clone": function () {},
  "collect": function () {},
  "compact": function () {},
  "compose": function () {},
  "concat": function () {},
  "constant": function () {},
  "contains": function () {},
  "countBy": function () {},
  "create": function () {},
  "debounce": function () {},
  "defaults": function () {},
  "defer": function () {},
  "delay": function () {},
  "detect": function () {},
  "difference": function () {},
  "drop": function () {},
  "each": function () {},
  "escape": function () {},
  "every": function () {},
  "extend": function () {},
  "extendOwn": function () {},
  "filter": function () {},
  "find": function () {},
  "findIndex": function () {},
  "findKey": function () {},
  "findLastIndex": function () {},
  "findWhere": function () {},
  "first": function () {},
  "flatten": function () {},
  "foldl": function () {},
  "foldr": function () {},
  "forEach": function () {},
  "functions": function () {},
  "groupBy": function () {},
  "has": function () {},
  "head": function () {},
  "identity": function () {},
  "include": function () {},
  "includes": function () {},
  "indexBy": function () {},
  "indexOf": function () {},
  "initial": function () {},
  "inject": function () {},
  "intersection": function () {},
  "invert": function () {},
  "invoke": function () {},
  "isArguments": function () {},
  "isArray": function () {},
  "isBoolean": function () {},
  "isDate": function () {},
  "isElement": function () {},
  "isEmpty": function () {},
  "isEqual": function () {},
  "isError": function () {},
  "isFinite": function () {},
  "isFunction": function () {},
  "isMatch": function () {},
  "isNaN": function () {},
  "isNull": function () {},
  "isNumber": function () {},
  "isObject": function () {},
  "isRegExp": function () {},
  "isString": function () {},
  "isUndefined": function () {},
  "iteratee": function () {},
  "join": function () {},
  "keys": function () {},
  "last": function () {},
  "lastIndexOf": function () {},
  "map": function () {},
  "mapObject": function () {},
  "matcher": function () {},
  "matches": function () {},
  "max": function () {},
  "memoize": function () {},
  "methods": function () {},
  "min": function () {},
  "mixin": function () {},
  "negate": function () {},
  "noConflict": function () {},
  "noop": function () {},
  "now": function () {},
  "object": function () {},
  "omit": function () {},
  "once": function () {},
  "pairs": function () {},
  "partial": function () {},
  "partition": function () {},
  "pick": function () {},
  "pluck": function () {},
  "pop": function () {},
  "property": function () {},
  "propertyOf": function () {},
  "push": function () {},
  "random": function () {},
  "range": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reject": function () {},
  "rest": function () {},
  "result": function () {},
  "reverse": function () {},
  "sample": function () {},
  "select": function () {},
  "shift": function () {},
  "shuffle": function () {},
  "size": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "sortBy": function () {},
  "sortedIndex": function () {},
  "splice": function () {},
  "tail": function () {},
  "take": function () {},
  "tap": function () {},
  "template": function () {},
  "throttle": function () {},
  "times": function () {},
  "toArray": function () {},
  "toJSON": function () {},
  "toString": function () {},
  "unescape": function () {},
  "union": function () {},
  "uniq": function () {},
  "unique": function () {},
  "uniqueId": function () {},
  "unshift": function () {},
  "unzip": function () {},
  "value": function () {},
  "valueOf": function () {},
  "values": function () {},
  "where": function () {},
  "without": function () {},
  "wrap": function () {},
  "zip": function () {}
};
/**********************************************************************
 * End Generated Extern for Web3
/**********************************************************************/